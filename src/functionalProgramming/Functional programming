The imperative programming style is a sort of list for the program to follow. When a code is made, its required that the code will
be read from the top down. Otherwise the thing won't work

Functional programming is a declarative type of programming. Meaning its more freeFlowing than the imperative style.
the main defining difference between the two styles is how the imperative style is about "how to solve" while the declarative
is about "what to solve".
In the case of functional programming it uses expressions instead of statement. An expression produces value,
while a statement assigns a variable.

The fundamental concepts within Functional programming are:
Pure Functions.
Recursion
Referential Transparency
Functions are First-Class and can be Higher-Order
Variables are immutable


The most basic part of functional programming is the pure function. A pure function is defined by two properties. Firstly, it returns the
same result if given the same argument. Secondly, it doesn't cause any side-effects. the later is called "immutability", meaning it only
affects the value it returns.
This makes functional programming easy to debug, while also making it easier to use in parallel with other extensions. Using a smart compiler,
the program can be frozen while remembering the result of the code. Since values won't change until code has been changed, it can be set on hold
until the value becomes necessary.
Its therefor not necessary within functional programming to have a "list" of code, since the expressions work independently.

Recursion is the Functional programmings alternative to for-loops. A recursive function is instead simply called repeatedly until
its base case is reached

Referential Transparency is about how every value in essence is constant. Once a value has been declared a value, it can't be changed.
This decreases chances of side-effects for the program.

Functions are First-Class and can be Higher-Order. This basically means a a function can be passed into another functions parameter. They can also
be returned from from a function and be saved into data-structures.

Variables are immutable means that all variables defined can't be changed. They are a constant natively. Coding can therefor be done
without worrying about values not changing

All of these factors make Functional programming an all-around easier to read and follow coding experience. With constant
variables and values its easier to work around new concept without the worry of interrupting previous code.
The big drawback of Function programming is the possible decrees in performance when new values and variables have to be
created. Therefor it's most likely best suited for smaller projects.

Functional programming is mainly used for "mathematical computations"/arithmetic's and parallel coding.

Functional programming is based on the Lamba Calculus framework, developed by Alonzo Church, to study the use of functions
within programming. It forms a theoretical framework for how functions work within coding, and forms a basis for almost
all functional programming.
One of Church's students where Alan Turing.

